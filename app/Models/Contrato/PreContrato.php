<?php

namespace App\Models\Contrato;

use App\Models\Atividades\Atividades;
use App\Models\Geral\Clientes;
use App\Models\Geral\Notificacoes;
use App\Models\Geral\Usuarios;
use App\Models\Licitacao\Licitacao;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;

/**
 * Class Aulas
 *
 * @package App\Models\Contrato
 * @mixin \Eloquent
 */
class PreContrato extends Model
{
    protected $primaryKey = 'id';

    protected $table = 'contrato_pre_contrato';

    public $timestamps = false;

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function ($novoPreContrato) {

            $controle =  Carbon::now()->format('dmY');

            $lastId = \DB::table('contrato_pre_contrato')
                ->whereMesDiaControle($controle)
                ->max('digito_controle');

            $novoPreContrato->mes_dia_controle = $controle;
            $novoPreContrato->digito_controle = (int)$lastId + 1;
            $novoPreContrato->codigo_pre_contrato = 'PC'.$controle.'-'.($lastId + 1);

            /**
             * Alimenta o canal de notificacoes
             * Envia uma notificacao para moderador novos pré-contratos
             */
            Notificacoes::registrarNotificacao("Pré-Contrato", "Novo pré-contrato Nº{$novoPreContrato->codigo_pre_contrato} foi criado", $novoPreContrato->id_executante);

            return $novoPreContrato;

        });
    }

    public static function buscaPreContratoPorId($idPreContrato)
    {
        return self::query()
            ->where('id', '=', $idPreContrato)
            ->first();
    }

    public function responsavel()
    {
        return $this->hasOne(Usuarios::class,'id', 'id_responsavel');
    }

    public function contratantes()
    {
        return $this->hasOne(Clientes::class, 'id', 'id_contratante');
    }

    public function executante()
    {
        return $this->hasOne(Clientes::class, 'id', 'id_executante');
    }

    public function licitacao()
    {
        return $this->hasOne(Licitacao::class, 'id', 'id_licitacao');
    }

    public function proposta()
    {
        return $this->hasMany(Proposta::class, 'id_pre_contrato', 'id');
    }

    public function anexos()
    {
        return $this->hasMany(ContratoAnexos::class, 'pre_contrato_id', 'id');
    }
}

