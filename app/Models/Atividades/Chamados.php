<?php

namespace App\Models\Atividades;

use App\Models\Geral\Departamentos;
use App\Models\Geral\Clientes;
use App\Models\Geral\FileStorage;
use App\Models\Geral\Notificacoes;
use App\Models\Geral\Usuarios;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\Request;
use function foo\func;

/**
 * Class Aulas
 *
 * @package App\Models\Atividades
 * @mixin \Eloquent
 */
class Chamados extends Model
{
    protected $primaryKey = 'id';

    protected $table = 'atividades_chamados';

    public $appends = ['conta_anexos'];

    public $timestamps = false;

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function ($novoChamado) {

            $controle =  Carbon::now()->format('dmY');

            $lastId = \DB::table('atividades_chamados')
                ->whereMesDiaControleChamado($controle)
                ->max('digito_controle_nr_chamado');

            $novoChamado->mes_dia_controle_chamado = $controle;
            $novoChamado->digito_controle_nr_chamado = (int)$lastId + 1;
            $novoChamado->nr_chamado = 'FA'.$controle.'-'.($lastId + 1);

            /**
             * Alimenta o canal de notificacoes
             * Envia uma notificacao para moderador novas atividades
             */
            Notificacoes::registrarNotificacao("Chamados", "Novo chamado Nº{$novoChamado->nr_chamado} foi criado", $novoChamado->id_usuario_executor);

            return $novoChamado;

        });


        self::created(function ($chamado){

            $atendimento = new Atendimento();

            $atendimento->id_chamado = $chamado->id;
            $atendimento->id_usuario_chamado = $chamado->id_usuario_criador;
            $atendimento->criado_por = $chamado->id_usuario_criador;
            $atendimento->criado_em = Carbon::now();

            $atendimento->save();
        });

    }

    public static function listarChamados($request)
    {

        if($request->paramControle == 't')
        {
            return self::query()
                ->orderBy('id', 'DESC')
                ->with('usuarioExecutor')
                ->with('usuarioCriador')
                ->with('atendimento')
                ->with('empresaChamado')
                ->with('anexoChamado')
                ->with('departamentoChamado')
                ->get()
                ->filter(function ($chamado) use ($request){
                    //Se atividade não for privada trazer tudo
                    if($chamado->atividadeChamado->privada == 'N'){
                        return true;
                    }

                    //Se atividade for privada e for do usuário logado igual ao execuar trazer.
                    if($chamado->id_usuario_executor == $request->idUsuario ){
                        return true;
                    }
                });
        }

        if($request->paramControle == 'm')
        {
            return self::query()
//			    ->whereIdUsuarioExecutor(request('idUsuario'))
                ->orderBy('criado_em', 'DESC')
                ->with('usuarioExecutor')
                ->with('usuarioCriador')
                ->with('atendimento')
                ->with('empresaChamado')
                ->with('anexoChamado')
                ->with('departamentoChamado')
                ->with('atividadeChamado')
                ->whereHas('atendimento', function ($query) use ($request){
                    $query->where('id_usuario_chamado', $request->idUsuario);
                })->get();
        }

        if($request->paramControle == 'a')
        {
            return self::query()
                ->orderBy('id', 'DESC')
                ->where('status_chamado', '=', ['CE'])
                ->with('usuarioExecutor')
                ->with('usuarioCriador')
                ->with('empresaChamado')
                ->with('anexoChamado')
                ->with('departamentoChamado')
                ->whereHas('atendimento', function ($query)use ($request){
                    $query->where('id_usuario_chamado', $request->idUsuario);
                })->get();

        }

        if($request->paramControle == 'f')
        {
            return self::query()
                ->orderBy('id', 'DESC')
                ->where('status_chamado', '=', ['FN'])
                ->with('usuarioExecutor')
                ->with('usuarioCriador')
                ->with('empresaChamado')
                ->with('anexoChamado')
                ->with('departamentoChamado')
                ->whereHas('atendimento', function ($query)use($request){
                    $query->where('id_usuario_chamado', $request->idUsuario);
                })
                ->get();

        }

        if($request->paramControle == 'i')
        {
            return self::query()
                ->orderBy('id', 'DESC')
                ->where('status_chamado', '=', ['IN'])
                ->with('usuarioExecutor')
                ->with('usuarioCriador')
                ->with('empresaChamado')
                ->with('anexoChamado')
                ->with('departamentoChamado')
                ->whereHas('atendimento', function ($query)use($request){
                    $query->where('id_usuario_chamado', $request->idUsuario);
                })
                ->get();
        }

        if($request->paramControle == 'c')
        {
            return self::query()
                ->orderBy('id', 'DESC')
                ->where('status_chamado', '=', ['CO'])
                ->with('usuarioExecutor')
                ->with('usuarioCriador')
                ->with('empresaChamado')
                ->with('anexoChamado')
                ->with('departamentoChamado')
                ->whereHas('atendimento', function ($query)use($request){
                    $query->where('id_usuario_chamado', $request->idUsuario);
                })
                ->get();
        }

        if($request->paramControle == 'v')
        {
            return self::query()
                ->orderBy('id', 'DESC')
                ->where('status_chamado', '=', ['CO'])
                ->with('usuarioExecutor')
                ->with('usuarioCriador')
                ->with('empresaChamado')
                ->with('anexoChamado')
                ->with('departamentoChamado')
                ->whereHas('atendimento', function ($query)use($request){
                    $query->where('id_usuario_criador', $request->idUsuario);
                })
                ->get();
        }

    }

    public static function listarChamadosPorNr($nr_chamado)
    {
        return self::query()
            ->where('nr_chamado', '=', $nr_chamado)
            ->with('usuarioExecutor')
            ->with('usuarioCriador')
            ->with('empresaChamado')
            ->with('anexoChamado')
            ->with('anexoIteracoes')
            ->with(['anexoChamadoPorIteracao' => function($query){
                $query->where('iteracao_id', '<>', null)
                      ->with('usuariosIteracao');
            }])
            ->with('departamentoChamado')
            ->with('atividadeChamado')
            ->with('subatividadeChamado')
            ->first();


    }

    /**
     * Mutator
     * @see $this->conta_anexos
     */
    public function getContaAnexosAttribute()
    {
        $anexos = 0;
        /** Faz a contagem dos anexos existentes */
        $anexos = $this->anexoIteracoes->reduce(function ($count, $iteracao) {
            if ($iteracao->uid_anexo) {
                return $count + 1;
            } else {
                return $count;
            }
        });
        return $anexos;
    }

    public static function hasMovementActivity($request)
    {
        return self::query()
            ->whereIdAtividade($request->id_atividade)
            ->first();
    }

    public static function hasMovementSubactivity($request)
    {
        return self::query()
            ->whereIdSubatividade($request->id_subatividade)
            ->first();
    }

    public static function dadosParaEmailObservadores($idChamado)
    {
        return self::query()
            ->whereId($idChamado)
            ->with('usuarioExecutor')
            ->with('usuarioCriador')
            ->first();
    }

    public static function listarTotalChamadosPorDepartamento(){

        $query = \DB::select("SELECT geral_clientes.nome AS empresa,
                                    geral_departamentos.nome as departamento,
                                    COUNT(id_departamento) AS qtde
                                    FROM atividades_chamados 
                                    INNER JOIN geral_departamentos ON geral_departamentos.id = atividades_chamados.id_departamento  
                                    INNER JOIN geral_clientes ON geral_clientes.id = atividades_chamados.id_empresa
                                    GROUP BY id_empresa, id_departamento, empresa, departamento");
        return $query;

    }

    public static function listarTotalChamadosPorStatus(){
        $query = \DB::select("SELECT a.status_chamado,
                                     COUNT(a.status_chamado) AS qtde_status
                              FROM atividades_chamados a
                              GROUP BY a.status_chamado
                              ORDER BY a.status_chamado");
        return $query;
    }

    public static function listarTotalAtividades(){
        $query = \DB::select("SELECT c.id_atividade,
                                     z.nm_atividade,
                                     d.nome,
                                     COUNT(*) n 
                        FROM atividades_chamados c
                        INNER JOIN geral_departamentos as d on c.id_departamento = d.id
                        INNER JOIN atividades_atividades z on c.id_atividade = z.id
                        GROUP BY c.id_atividade, d.nome, z.nm_atividade
                        ORDER BY n DESC");
        return $query;
    }


    /**
     * Relacionamentos
     */
    public function usuarioExecutor()
    {
        return $this->hasOne(Usuarios::class, 'id', 'id_usuario_executor');
    }

    public function usuarioCriador()
    {
        return $this->hasOne(Usuarios::class, 'id', 'id_usuario_criador');
    }

    public function atendimento()
    {
        return $this->hasOne(Atendimento::class, 'id_chamado', 'id');
    }

    public function empresaChamado()
    {
        return $this->hasOne(Clientes::class, 'id', 'id_empresa');
    }

    public function departamentoChamado()
    {
        return $this->hasOne(Departamentos::class, 'id', 'id_departamento');
    }

    public function anexoIteracoes()
    {
        return $this->hasMany(Iteracao::class, 'id_chamado', 'id');
    }

    public function atividadeChamado()
    {
        return $this->hasOne(Atividades::class,'id', 'id_atividade');
    }

    public function subatividadeChamado()
    {
        return $this->hasOne(Subatividades::class, 'id', 'id_subatividade');
    }

    public function anexoChamado()
    {
        return $this->hasMany(ChamadosAnexos::class, 'chamado_id', 'id');
    }

    public function anexoChamadoPorIteracao()
    {
        return $this->hasMany(ChamadosAnexos::class, 'chamado_id', 'id');
    }

}

